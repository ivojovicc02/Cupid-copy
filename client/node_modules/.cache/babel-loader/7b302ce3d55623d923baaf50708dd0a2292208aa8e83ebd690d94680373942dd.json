{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jovici\\\\Desktop\\\\zavrsni\\\\tinder-clone\\\\client\\\\src\\\\components\\\\ChatDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000'); // Povezivanje sa Socket.IO serverom\n\nconst ChatDisplay = ({\n  userId,\n  clickedUserId\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n\n  // Dohvati poruke iz MongoDB-a prilikom učitavanja komponente\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get('http://localhost:8000/messages', {\n        params: {\n          userId,\n          correspondingUserId: clickedUserId\n        }\n      });\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  useEffect(() => {\n    fetchMessages();\n\n    // Slušaj nove poruke od Socket.IO servera\n    socket.on('receiveMessage', newMessage => {\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n    });\n    return () => {\n      socket.off('receiveMessage');\n    };\n  }, [userId, clickedUserId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-display\",\n    children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatDisplay, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n_c = ChatDisplay;\nexport default ChatDisplay;\nvar _c;\n$RefreshReg$(_c, \"ChatDisplay\");","map":{"version":3,"names":["React","useEffect","useState","io","axios","jsxDEV","_jsxDEV","socket","ChatDisplay","userId","clickedUserId","_s","messages","setMessages","fetchMessages","response","get","params","correspondingUserId","data","error","console","on","newMessage","prevMessages","off","className","children","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jovici/Desktop/zavrsni/tinder-clone/client/src/components/ChatDisplay.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport axios from 'axios';\r\n\r\nconst socket = io('http://localhost:8000'); // Povezivanje sa Socket.IO serverom\r\n\r\nconst ChatDisplay = ({ userId, clickedUserId }) => {\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    // Dohvati poruke iz MongoDB-a prilikom učitavanja komponente\r\n    const fetchMessages = async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:8000/messages', {\r\n                params: { userId, correspondingUserId: clickedUserId }\r\n            });\r\n            setMessages(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching messages:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchMessages();\r\n\r\n        // Slušaj nove poruke od Socket.IO servera\r\n        socket.on('receiveMessage', (newMessage) => {\r\n            setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('receiveMessage');\r\n        };\r\n    }, [userId, clickedUserId]);\r\n\r\n    return (\r\n        <div className=\"chat-display\">\r\n            {messages.map((message, index) => (\r\n                <div key={index}>\r\n                    <p>{message.message}</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatDisplay;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAE5C,MAAMK,WAAW,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAMY,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,gCAAgC,EAAE;QAC/DC,MAAM,EAAE;UAAER,MAAM;UAAES,mBAAmB,EAAER;QAAc;MACzD,CAAC,CAAC;MACFG,WAAW,CAACE,QAAQ,CAACI,IAAI,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD;EACJ,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACZa,aAAa,CAAC,CAAC;;IAEf;IACAP,MAAM,CAACe,EAAE,CAAC,gBAAgB,EAAGC,UAAU,IAAK;MACxCV,WAAW,CAAEW,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,UAAU,CAAC,CAAC;IAChE,CAAC,CAAC;IAEF,OAAO,MAAM;MACThB,MAAM,CAACkB,GAAG,CAAC,gBAAgB,CAAC;IAChC,CAAC;EACL,CAAC,EAAE,CAAChB,MAAM,EAAEC,aAAa,CAAC,CAAC;EAE3B,oBACIJ,OAAA;IAAKoB,SAAS,EAAC,cAAc;IAAAC,QAAA,EACxBf,QAAQ,CAACgB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBACzBxB,OAAA;MAAAqB,QAAA,eACIrB,OAAA;QAAAqB,QAAA,EAAIE,OAAO,CAACA;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC,GADlBJ,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACvB,EAAA,CArCIH,WAAW;AAAA2B,EAAA,GAAX3B,WAAW;AAuCjB,eAAeA,WAAW;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}