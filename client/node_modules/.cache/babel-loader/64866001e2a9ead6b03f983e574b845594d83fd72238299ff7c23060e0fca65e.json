{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jovici\\\\Desktop\\\\zavrsni\\\\tinder-clone\\\\client\\\\src\\\\components\\\\ChatDisplay.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport Chat from './Chat';\nimport ChatInput from './ChatInput';\nimport { useState, useEffect } from 'react';\nimport { useSocket } from './SocketContext'; // Adjust path as needed\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatDisplay = ({\n  user,\n  clickedUser\n}) => {\n  _s();\n  const userId = user === null || user === void 0 ? void 0 : user.user_id;\n  const clickedUserId = clickedUser === null || clickedUser === void 0 ? void 0 : clickedUser.user_id;\n  const [messages, setMessages] = useState([]);\n  const socket = useSocket();\n\n  // Function to fetch initial messages\n  const fetchMessages = async () => {\n    try {\n      const response1 = await axios.get('http://localhost:8000/messages', {\n        params: {\n          userId: userId,\n          correspondingUserId: clickedUserId\n        }\n      });\n      const response2 = await axios.get('http://localhost:8000/messages', {\n        params: {\n          userId: clickedUserId,\n          correspondingUserId: userId\n        }\n      });\n\n      // Combine and format messages\n      const allMessages = [...response1.data.map(msg => ({\n        name: user === null || user === void 0 ? void 0 : user.first_name,\n        img: user === null || user === void 0 ? void 0 : user.url,\n        message: msg.message,\n        timestamp: msg.timestamp\n      })), ...response2.data.map(msg => ({\n        name: clickedUser === null || clickedUser === void 0 ? void 0 : clickedUser.first_name,\n        img: clickedUser === null || clickedUser === void 0 ? void 0 : clickedUser.url,\n        message: msg.message,\n        timestamp: msg.timestamp\n      }))];\n\n      // Sort messages by timestamp\n      setMessages(allMessages.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp)));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    fetchMessages(); // Fetch initial messages\n\n    // Listen for incoming messages\n    socket.on('receiveMessage', message => {\n      setMessages(prevMessages => [...prevMessages, {\n        name: message.from_userId === userId ? user === null || user === void 0 ? void 0 : user.first_name : clickedUser === null || clickedUser === void 0 ? void 0 : clickedUser.first_name,\n        img: message.from_userId === userId ? user === null || user === void 0 ? void 0 : user.url : clickedUser === null || clickedUser === void 0 ? void 0 : clickedUser.url,\n        message: message.text,\n        timestamp: message.timestamp\n      }]);\n    });\n    return () => {\n      socket.off('receiveMessage');\n    };\n  }, [userId, clickedUserId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Chat, {\n      descendingOrderMessages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      currentUserId: userId,\n      recipientUserId: clickedUserId,\n      onMessageSent: fetchMessages // Optionally refresh messages after sending\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(ChatDisplay, \"jckZ3WmfI8YYqFwnN+Sq58Ox2aw=\", false, function () {\n  return [useSocket];\n});\n_c = ChatDisplay;\nexport default ChatDisplay;\nvar _c;\n$RefreshReg$(_c, \"ChatDisplay\");","map":{"version":3,"names":["axios","Chat","ChatInput","useState","useEffect","useSocket","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatDisplay","user","clickedUser","_s","userId","user_id","clickedUserId","messages","setMessages","socket","fetchMessages","response1","get","params","correspondingUserId","response2","allMessages","data","map","msg","name","first_name","img","url","message","timestamp","sort","a","b","Date","error","console","log","on","prevMessages","from_userId","text","off","children","descendingOrderMessages","fileName","_jsxFileName","lineNumber","columnNumber","currentUserId","recipientUserId","onMessageSent","_c","$RefreshReg$"],"sources":["C:/Users/Jovici/Desktop/zavrsni/tinder-clone/client/src/components/ChatDisplay.js"],"sourcesContent":["import axios from 'axios';\r\nimport Chat from './Chat';\r\nimport ChatInput from './ChatInput';\r\nimport { useState, useEffect } from 'react';\r\nimport { useSocket } from './SocketContext'; // Adjust path as needed\r\n\r\nconst ChatDisplay = ({ user, clickedUser }) => {\r\n    const userId = user?.user_id;\r\n    const clickedUserId = clickedUser?.user_id;\r\n    const [messages, setMessages] = useState([]);\r\n    const socket = useSocket();\r\n\r\n    // Function to fetch initial messages\r\n    const fetchMessages = async () => {\r\n        try {\r\n            const response1 = await axios.get('http://localhost:8000/messages', {\r\n                params: { userId: userId, correspondingUserId: clickedUserId },\r\n            });\r\n            const response2 = await axios.get('http://localhost:8000/messages', {\r\n                params: { userId: clickedUserId, correspondingUserId: userId },\r\n            });\r\n\r\n            // Combine and format messages\r\n            const allMessages = [\r\n                ...response1.data.map((msg) => ({\r\n                    name: user?.first_name,\r\n                    img: user?.url,\r\n                    message: msg.message,\r\n                    timestamp: msg.timestamp,\r\n                })),\r\n                ...response2.data.map((msg) => ({\r\n                    name: clickedUser?.first_name,\r\n                    img: clickedUser?.url,\r\n                    message: msg.message,\r\n                    timestamp: msg.timestamp,\r\n                })),\r\n            ];\r\n\r\n            // Sort messages by timestamp\r\n            setMessages(allMessages.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp)));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchMessages(); // Fetch initial messages\r\n\r\n        // Listen for incoming messages\r\n        socket.on('receiveMessage', (message) => {\r\n            setMessages((prevMessages) => [\r\n                ...prevMessages,\r\n                {\r\n                    name: message.from_userId === userId ? user?.first_name : clickedUser?.first_name,\r\n                    img: message.from_userId === userId ? user?.url : clickedUser?.url,\r\n                    message: message.text,\r\n                    timestamp: message.timestamp,\r\n                },\r\n            ]);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('receiveMessage');\r\n        };\r\n    }, [userId, clickedUserId]);\r\n\r\n    return (\r\n        <>\r\n            <Chat descendingOrderMessages={messages} />\r\n            <ChatInput\r\n                currentUserId={userId}\r\n                recipientUserId={clickedUserId}\r\n                onMessageSent={fetchMessages} // Optionally refresh messages after sending\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChatDisplay;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7C,MAAMC,WAAW,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAMC,MAAM,GAAGH,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,OAAO;EAC5B,MAAMC,aAAa,GAAGJ,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEG,OAAO;EAC1C,MAAM,CAACE,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMgB,MAAM,GAAGd,SAAS,CAAC,CAAC;;EAE1B;EACA,MAAMe,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACA,MAAMC,SAAS,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAAC,gCAAgC,EAAE;QAChEC,MAAM,EAAE;UAAET,MAAM,EAAEA,MAAM;UAAEU,mBAAmB,EAAER;QAAc;MACjE,CAAC,CAAC;MACF,MAAMS,SAAS,GAAG,MAAMzB,KAAK,CAACsB,GAAG,CAAC,gCAAgC,EAAE;QAChEC,MAAM,EAAE;UAAET,MAAM,EAAEE,aAAa;UAAEQ,mBAAmB,EAAEV;QAAO;MACjE,CAAC,CAAC;;MAEF;MACA,MAAMY,WAAW,GAAG,CAChB,GAAGL,SAAS,CAACM,IAAI,CAACC,GAAG,CAAEC,GAAG,KAAM;QAC5BC,IAAI,EAAEnB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEoB,UAAU;QACtBC,GAAG,EAAErB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEsB,GAAG;QACdC,OAAO,EAAEL,GAAG,CAACK,OAAO;QACpBC,SAAS,EAAEN,GAAG,CAACM;MACnB,CAAC,CAAC,CAAC,EACH,GAAGV,SAAS,CAACE,IAAI,CAACC,GAAG,CAAEC,GAAG,KAAM;QAC5BC,IAAI,EAAElB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEmB,UAAU;QAC7BC,GAAG,EAAEpB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEqB,GAAG;QACrBC,OAAO,EAAEL,GAAG,CAACK,OAAO;QACpBC,SAAS,EAAEN,GAAG,CAACM;MACnB,CAAC,CAAC,CAAC,CACN;;MAED;MACAjB,WAAW,CAACQ,WAAW,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAACF,SAAS,CAAC,GAAG,IAAII,IAAI,CAACD,CAAC,CAACH,SAAS,CAAC,CAAC,CAAC;IAC1F,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB;EACJ,CAAC;EAEDpC,SAAS,CAAC,MAAM;IACZgB,aAAa,CAAC,CAAC,CAAC,CAAC;;IAEjB;IACAD,MAAM,CAACwB,EAAE,CAAC,gBAAgB,EAAGT,OAAO,IAAK;MACrChB,WAAW,CAAE0B,YAAY,IAAK,CAC1B,GAAGA,YAAY,EACf;QACId,IAAI,EAAEI,OAAO,CAACW,WAAW,KAAK/B,MAAM,GAAGH,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEoB,UAAU,GAAGnB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEmB,UAAU;QACjFC,GAAG,EAAEE,OAAO,CAACW,WAAW,KAAK/B,MAAM,GAAGH,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEsB,GAAG,GAAGrB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEqB,GAAG;QAClEC,OAAO,EAAEA,OAAO,CAACY,IAAI;QACrBX,SAAS,EAAED,OAAO,CAACC;MACvB,CAAC,CACJ,CAAC;IACN,CAAC,CAAC;IAEF,OAAO,MAAM;MACThB,MAAM,CAAC4B,GAAG,CAAC,gBAAgB,CAAC;IAChC,CAAC;EACL,CAAC,EAAE,CAACjC,MAAM,EAAEE,aAAa,CAAC,CAAC;EAE3B,oBACIT,OAAA,CAAAE,SAAA;IAAAuC,QAAA,gBACIzC,OAAA,CAACN,IAAI;MAACgD,uBAAuB,EAAEhC;IAAS;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3C9C,OAAA,CAACL,SAAS;MACNoD,aAAa,EAAExC,MAAO;MACtByC,eAAe,EAAEvC,aAAc;MAC/BwC,aAAa,EAAEpC,aAAc,CAAC;IAAA;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC;EAAA,eACJ,CAAC;AAEX,CAAC;AAACxC,EAAA,CAtEIH,WAAW;EAAA,QAIEL,SAAS;AAAA;AAAAoD,EAAA,GAJtB/C,WAAW;AAwEjB,eAAeA,WAAW;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}